<script type="text/javascript" src="~/OPCHTML/js/datatables/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="~/OPCHTML/js/lib/jquery.numberformatter-1.2.3.min.js"></script>
<script>
    $(document).ready(function () {
        $("#AirportWindow").kendoWindow({
            title: "MCT - Airport Termial Overview",
            draggable: false,
            modal: false,
            width: $("#splitter").width() - 244,
            height: $(".splitter-main").height() - 33,
            position: {
                top: $("#Header").height() + 2,
                left: 246
            },
            resizable: false
        });

        //removes all buttons from kendo window
        $('.k-window-titlebar').find('.k-window-actions').css('visibility', 'hidden');

        //delete the SignIn kendoWindow once loaded
        if ($('#pageData').is(':visible')) {
            $('#pageData').data('kendoWindow').destroy();
        };

        //if the splitter is already collapsed, expand the main window
        if ($('.splitter-stats').width() < 200) {
            $('body').find('.k-window').css('width', '+=200');
            $('body').find('.k-window').css('left', '-=200');
        };

        InitializeOPC();

        $(".gate_fire").hide();

        $('#menuItemUserAdmin').css('display', ('@TempData["AuthLevel"]' > 3 ? 'list-item' : 'none'));
        $("#menuItemRTUAutoOnSP").css('display', ('@TempData["AuthLevel"]' > 3 ? 'list-item' : 'none'));

        $('span#CurrentUser').html('@HttpContext.Current.User.Identity.Name');
        Init();
    });

    function InitializeOPC() {
        var tags = [];
        var rawScreens = '@Html.Raw(Json.Encode(TempData["Screens"]))';
        var screens = JSON.parse(rawScreens);

        var airportAlarms = [];
        var airportWarnings = [];
        var airportMasterAlarms = [];
        var columnDef = [
                            { name: "AlarmID", text: "Alarm ID", type: "string", visible: false },
                            { name: "AlarmDateTime", text: "Alarm Date/Time", type: "datetime", visible: true, sort: 'desc', width: '120px', searchable: false },
                            { name: "Active", text: "Active", type: "boolean", visible: true, width: '40px', align: 'center' },
                            { name: "AlarmValue", text: "Alarm Value", type: "string", visible: false, align: 'right' },
                            { name: "Text", text: "Text", type: "string", visible: true },
                            //{ name: "AlarmType", text: "Alarm Type", type: "string", visible: true, width: '5px'},
                            { name: "Priority", text: "Priority", type: "string", visible: true, width: '5px', align: 'right' }
        ]

        for (i = 0; i < screens.length; i++) {
            var gateNumber = screens[i].Gate;
            airportAlarms.push(gateNumber + "_PBB_ALARMS");
            airportAlarms.push(gateNumber + "_RTU_ALARMS");
            airportAlarms.push(gateNumber + "_GPU_ALARMS");
            airportWarnings.push(gateNumber + "_PBB_WARNINGS");
            airportWarnings.push(gateNumber + "_RTU_WARNINGS");
            airportWarnings.push(gateNumber + "_GPU_WARNINGS");
            airportMasterAlarms.push(gateNumber + "_PBB_ALARMS");
            airportMasterAlarms.push(gateNumber + "_RTU_ALARMS");
            airportMasterAlarms.push(gateNumber + "_GPU_ALARMS");
            airportMasterAlarms.push(gateNumber + "_PBB_WARNINGS");
            airportMasterAlarms.push(gateNumber + "_RTU_WARNINGS");
            airportMasterAlarms.push(gateNumber + "_GPU_WARNINGS");
        }

        // set up moitoring of AC and Gate tags, and firing callback on data refresh
        OPC.toggle_refresh(false);
        OPC.tags = [];
        OPC.watch_tags = [];
        OPC_config.tags = [];
        OPC_config.watch_tags = [];
        OPC_config.alarm_bindings = [];
        OPC_config.tag_prefix = "Airport." + "@TempData["ClientAbbr"]" + ".Term1.";
        OPC_config.refresh_callback = opc_airport_callback;
        OPC_config.watch_tags = tags;
        OPC_config.alarm_bindings = [
            {
                alarmid: "AirportAlarms",
                callback: updateAirportAlarms,
                showInfo: false,
                showHistory: false,
                showSearch: false,
                height: 200,
                filter: { alarmtypes: ["Digital"], alarmgroups: airportAlarms},
                columns: columnDef
            },{
                alarmid: "AirportWarnings",
                callback: updateAirportWarnings,
                showInfo: false,
                showHistory: false,
                showSearch: false,
                height: 200,
                filter: {alarmtypes: ["Digital"], alarmgroups: airportWarnings},
                columns: columnDef
            },{
                alarmid: "AirportMasterAlarms",
                callback: updateMasterAirportAlarms,
                showInfo: false,
                showHistory: false,
                showSearch: false,
                height: 200,
                filter: {alarmtypes: ["Digital"], alarmgroups: airportMasterAlarms},
                columns: columnDef
            }
        ];

        tags.push("RTUAutoOnLeadTime.Value");
        for (i = 0; i < screens.length; i++) {
            var gateNumber = screens[i].Gate;
            var zoneNumber = screens[i].Zone;
            var pre = "Zone" + zoneNumber + ".Gate" + gateNumber + ".";
            tags.push(pre + "PBB._Commissioned.Value");                  // aircraft is docked
        }

        OPC.init(); //required for ajax calls in OPC

    };

    function get_value(tag) {
        var tagTemp = tag + (tag.endsWith(".Value") ? "" : ".Value");
        if (!OPC.tags[tagTemp.replace(".Value", "")].props["Value"].quality) {
            return null;
        }
        return OPC.get_value(tagTemp);
    }

    function get_bool(tag) {
        var tagTemp = tag + (tag.endsWith(".Value") ? "" : ".Value");
        if (!OPC.tags[tagTemp.replace(".Value", "")].props["Value"].quality) {
            return null;
        }

        var b = OPC.get_value(tagTemp);
        if (b && b == "True") return true;
        if (b && b == "False") return false;
        return null;
    }

    // Show and hide images based on gate/aircraft status
    //   Wide Gate will be shown ONLY if both L and R gate DoorPositions are set to "Wide"
    //   Aircraft will display only if AircraftSubType is set to Wide or Narrow for gate
    //   Wide aircraft will display ONLY if both gates are showing "Wide" for AircraftSubType
    function check_gate_images(zone, gate) {
        var pre = OPC_config.tag_prefix + "Zone" + zone + ".Gate" + gate + ".PBB.";

        $("#Gate_" + gate + "_Plane").removeClass(function (index, css) {
            return (css.match(/\bnot_docked/g) || []).join(' ');
        });
        $("#Gate_" + gate + "_Status").removeClass(function (index, css) {
            return (css.match(/\bstat-[a-zA-Z]\S+/g) || []).join(' ');
        });

        var is_commissioned = get_bool(pre + "_Commissioned.Value");             // check to see if the gate is Active

        if (is_commissioned) {

            var is_parked = get_bool(pre + "Parked.Value");             // check for parked and default plane type to NARROW
            var airCraftType = get_value(pre + "AircraftSubType.Value");
            if (airCraftType == null || is_parked == null || is_parked) {
                airCraftType = "NARROW";
            }

            var alarmCount = $("#AirportAlarms tr:contains('Gate " + gate + "')").length;
            var show_wide = (airCraftType.toUpperCase().indexOf("WIDE") >= 0) ? true : false;
            var show_ac = get_bool(pre + "AIRCRAFTDOCKEDCALCULATION.Value");            // aircraft is docked
            var show_g = get_bool(pre + "LoggedOn.Value");              // show green
            var show_o = get_bool(pre + "AIRCRAFTDOCKEDCALCULATION.Value");             // show orange
            var show_blk = get_bool(pre + "Remote Bridge Status.Value");             // show black-red

            var imgPath = $('#building').css('content').match(/(.*url[(]*\")(.*)(\Images)/)[2];
            $("#Gate_" + gate + "_Status").css({ 'content': 'url(' + imgPath + 'Images/Airport/mct-gate' + gate + (show_wide ? '-wide' : '') + '-idle.png)', 'display': 'inline' });

            if (show_ac != null && show_g != null && show_o != null) {   // removed csw20160211:  && show_r != null && show_y != null
                $("#Gate_" + gate + "_Plane").css((show_ac ? { 'content': 'url(' + imgPath + 'Images/Airport/mct-gate' + gate + (show_wide ? '-wide' : '') + '-plane.png)', 'display': 'inline' } : { 'content': 'none', 'display': 'none' }));
                switch (true) {
                    case show_blk:
                        $("#Gate_" + gate + "_Status").addClass("stat-disabled");
                        break;
                    case alarmCount > 0:
                        $("#Gate_" + gate + "_Status").addClass("stat-alarm");
                        break;
                    case show_o:
                        $("#Gate_" + gate + "_Status").addClass("stat-docked");
                        break;
                    case show_g:
                        $("#Gate_" + gate + "_Status").addClass("stat-logged");
                        break;
                    default:
                        break;
                }
            }
        }
        else {
            var imgPath = $('#building').css('content').match(/(.*url[(]*\")(.*)(\Images)/)[2];
            $("#Gate_" + gate + "_Status").css({ 'content': 'url(' + imgPath + 'Images/Airport/mct-gate' + gate + '-idle.png)', 'display': 'inline' });

            if (is_commissioned == null) {
                $("#Gate_" + gate + "_Plane").css({ "content": 'none', 'display': 'none' });
                $("#Gate_" + gate + "_Status").addClass("stat-bq");
            }
            else {
                $("#Gate_" + gate + "_Plane").css({ "content": 'none', 'display': 'none' });
                $("#Gate_" + gate + "_Status").addClass("stat-nc");
            }
        }
    }

    function opc_airport_callback(data) {
        var rawScreens = '@Html.Raw(Json.Encode(TempData["Screens"]))';
        var screens = JSON.parse(rawScreens);
        var tags_added = false;

        for (i = 0; i < screens.length; i++) {
            var gateNumber = screens[i].Gate;
            var zoneNumber = screens[i].Zone;

            var pre = "Zone" + zoneNumber + ".Gate" + gateNumber + ".";
            var is_commissioned = get_bool(OPC.tag_prefix + pre + "PBB._Commissioned.Value");
            if (is_commissioned && !OPC_config.watch_tags.includes(pre + "PBB.AIRCRAFTDOCKEDCALCULATION.Value")) {
                OPC.toggle_refresh(false);
                OPC_config.watch_tags.push(pre + "PBB.AIRCRAFTDOCKEDCALCULATION.Value");                  // aircraft is docked
                OPC_config.watch_tags.push(pre + "PBB.LoggedOn.Value");                  // show green
                OPC_config.watch_tags.push(pre + "PBB.Parked.Value");                  // show green
                OPC_config.watch_tags.push(pre + "PBB.AircraftSubType.Value");            // Show Jumbo Graphics
                OPC_config.watch_tags.push(pre + "PBB.Remote Bridge Status.Value");      // 
                console.log(OPC_config.watch_tags.length);
                OPC.toggle_refresh(true);
                tags_added = true;
                continue;
            }
            check_gate_images(zoneNumber, gateNumber);
        }
        if(tags_added)
        {
            OPC.init();
        }
    }

    function CloseKendoAirport() {
        if ($('#AirportWindow').is(':visible')) {
            $('#AirportWindow').data('kendoWindow').destroy();
        }
    }

    function GoZone(zoneNumber, icon) {
        $.ajax({
            url: 'Zones/Zones/ShowZone',
            type: "GET",
            data: {
				clientName: "MCT",
                zoneNum: zoneNumber,
            },
            contentType: 'text/html',
            success: function (data) {
                CloseKendoAirport();
                $('#main-body').html(data);
                ChangeIcons(icon);
            }
        })
    }

    function GoZoneGate(zoneNumber, gateNumber, icon) {
        $.ajax({
            url: 'Gate/Gate/ShowGates',
            type: "GET",
            data: {
                zoneNum: zoneNumber,
                gateNum: gateNumber
            },
            contentType: 'text/html',
            success: function (data) {
                CloseKendoAirport();
                $('#main-body').html(data);
                ChangeIcons(icon);
            }
        })
    }

    function updateMasterAirportAlarms() {
        var PriorityCol = -1;
        var AlarmTypeCol = -1;
        var alarmCnt = 0;
        var warningCnt = 0;

        PriorityCol = $('#AirportMasterAlarms_tbl th[aria-label*="Priority"]').index() + 1;
        if (PriorityCol > 0) {
            $('#AirportMasterAlarms_tbl th:nth-child(' + PriorityCol + '),#AirportMasterAlarms_tbl td:nth-child(' + PriorityCol + ')').hide()
            $('#AirportMasterAlarms_tbl tr').not('thead tr').each(function (idx, row) {
                if ($(this).children('td').length > 1) {
                    var cellData = $(this).find('td').eq(PriorityCol-1)[0].innerText;
                    alarmCnt = (cellData == 100) ? alarmCnt + 1 : alarmCnt;
                    warningCnt = (cellData == 0) ? warningCnt + 1 : warningCnt;
                }
            });
        }
        $("#MasterAlarmCount").html(alarmCnt + " Active<br /> Alarms");
        $("#MasterWarningCount").html(warningCnt + " Active<br /> Warnings");
    };

    function updateAirportAlarms() {
        var PriorityCol = -1;
        var AlarmTypeCol = -1;

        PriorityCol = $('#AirportAlarms_tbl th[aria-label*="Priority"]').index() + 1;
        if (PriorityCol > 0) {
            $('#AirportAlarms_tbl th:nth-child(' + PriorityCol + '),#AirportAlarms_tbl td:nth-child(' + PriorityCol + ')').hide()
            $('#AirportAlarms_tbl tr').not('thead tr').each(function (idx, row) {
                if ($(this).children('td').length > 1) {
                    var cellData = $(this).find('td').eq(PriorityCol-1)[0].innerText;
                    switch (cellData) {
                        case '0':
                            $(this).addClass("WarningRow");
                            break;
                        case '100':
                            $(this).addClass("AlarmRow");
                            break;
                        default:
                            break;
                    }
                }
            });
        }
    };

    function updateAirportWarnings() {
        var PriorityCol = -1;
        var AlarmTypeCol = -1;

        PriorityCol = $('#AirportWarnings_tbl th[aria-label*="Priority"]').index() + 1;
        if (PriorityCol > -1) {
            //AlarmTypeCol = PriorityCol - 1;
            //$('#AirportWarnings_tbl th:nth-child(' + AlarmTypeCol + '),AirportWarnings_tbl td:nth-child(' + AlarmTypeCol + ')').hide()
            $('#AirportWarnings_tbl th:nth-child(' + PriorityCol + '),AirportWarnings_tbl td:nth-child(' + PriorityCol + ')').hide()
            $('#AirportWarnings_tbl tr').not('thead tr').each(function (idx, row) {
                if ($(this).children('td').length > 1) {
                    var cellData = $(this).find('td').eq(PriorityCol-1)[0].innerText;
                    switch (cellData) {
                        case '0':
                            $(this).addClass("WarningRow");
                            break;
                        case '100':
                            $(this).addClass("AlarmRow");
                            break;
                        default:
                            break;
                    }
                }
            });
        }
    };

</script>

<div id="AirportWindow" class="Window-Container Airport-Window">
    <div id="gates_container">
        <!-- Add Building Image Overlays -->
        <img id="building" class="img" />
        <img id="gates_nc" class="img" />

        <!-- Add Gates Legend Image Ovelays -->
        <img id="legend-backbround" class="img" />
        <img id="legend-NCF" class="img stat-nc" />
        <img id="legend-BDF" class="img stat-bq" />
        <img id="legend-BIM" class="img" />
        <img id="legend-LONF" class="img stat-logged" />
        <img id="legend-AL" class="img stat-docked" />
        <img id="legend-BD" class="img stat-disabled" />
        <img id="legend-BF" class="img stat-alarm" />
        <img id="legend-BSA" class="img" />
        
        @{
            List<object> screens = (List<object>)TempData["Screens"];
            foreach (object scr in screens)
            {
                var zoneNumber = scr.GetType().GetProperty("Zone").GetValue(scr, null).ToString();
                var gateNumber = scr.GetType().GetProperty("Gate").GetValue(scr, null).ToString();
                <img id="Gate_@(gateNumber)_Plane" class="img gate_plane" />
                <img id="Gate_@(gateNumber)_Status" class="img gate_status" />
            }
        }

        <!-- gate links  -->
        <div id="gateLinkid" >
            @{
                foreach (object scr in screens)
                {
                    var zoneNumber = scr.GetType().GetProperty("Zone").GetValue(scr, null).ToString();
                    var gateNumber = scr.GetType().GetProperty("Gate").GetValue(scr, null).ToString();
                    var displayName = scr.GetType().GetProperty("DisplayName").GetValue(scr, null).ToString();
                    var displayOrder = scr.GetType().GetProperty("DisplayOrder").GetValue(scr, null).ToString();
                    <a id="gate@(gateNumber)" class="gate_link" onclick="GoZoneGate('@(zoneNumber)', '@(gateNumber)', @(displayOrder))">@(gateNumber) </a>
                }
            }
            <a id="zoneA" class="zone_link" onclick='GoZone("A",2)'>North Pier</a>
            <a id="zoneB" class="zone_link" onclick='GoZone("B",3)'>South Pier</a>
            <a id="zoneC" class="zone_link" onclick='GoZone("C",4)'>West Pier</a>
        </div>        
    </div>
    <div id="AirportAlarmWindow">
        <div id="AirportAlarms"></div>
    </div>
    <div id="AirportWarningWindow" style="display: none">
        <div id="AirportWarnings"></div>
    </div>
</div>
<div id="AirportMasterAlarmWindow" style="display: none">
    <div id="AirportMasterAlarms"></div>
</div>
